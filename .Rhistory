}
plot(ns~rvals) #check out how much variance matters for sampling!
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
pow<-c(0.2, 0.15)
for(j in pow){
for(i in rvals){
test<-pwr.r.test(r=i, sig.level = 0.05, power=j)
#solving for n so it is not provided.
##r is an estimated correlation coefficient (analagous to effect size. )
ns<-c(ns, test$n)
}
}
ns
plot(ns[1:5~rvals) #check out how much variance matters for sampling!
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10]~rvals, add=T, col=red)
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10]~rvals, add=T, col=red)
plot(ns[6:10]~rvals, add=T, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10]~rvals, add=T, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10]~rvals, add=TRUE, col="red")
points(ns[6:10]~rvals, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
points(ns[6:10]~rvals, col="red")
points(ns[6:10],rvals, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10],rvals, new=F, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10],rvals, new=F, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10],rvals, new=F, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10]~rvals, new=F, col="red")
plot(ns[6:10]~rvals, new=T, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10]~rvals, new=T, col="red")
plot(ns~rvals) #check out how much variance matters for sampling!
plot(ns,rvals) #check out how much variance matters for sampling!
plot(ns~c(rvals,rvals) #check out how much variance matters for sampling!
plot(ns~c(rvals,rvals)) #check out how much variance matters for sampling!
c(rvals,rvals)
ns
plot(ns~c(rvals,rvals)) #check out how much variance matters for sampling!
plot(ns[1:5~rvals)
plot(ns[1:5]~rvals)
plot(ns[6:10]~rvals, add=T)
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
par(new=T)
plot(ns[6:10]~rvals)
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
par(new=T)
plot(ns[6:10]~rvals)
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
par(new=T)
plot(ns[6:10]~rvals, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
par(new=F)
plot(ns[6:10]~rvals, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
par(new=T)
plot(ns[6:10]~rvals, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10]~rvals, col="red")
ns
library(ggplot2)
ggplot(aes(ns[1:5], x=rvals))+geom_point()+theme_classic()
ggplot(data=ns, aes(ns[1:5], x=rvals))+geom_point()+theme_classic()
ns<-data.frame(c(ns, c(rvals, rvals)))
ns
ns<-as.data.frame(c(ns, c(rvals, rvals)))
ns
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
pow<-c(0.2, 0.15)
for(j in pow){
for(i in rvals){
test<-pwr.r.test(r=i, sig.level = 0.05, power=j)
#solving for n so it is not provided.
##r is an estimated correlation coefficient (analagous to effect size. )
ns<-c(ns, test$n)
}
}
library(ggplot2)
ns<-as.data.frame(c(ns, c(rvals, rvals)))
ns
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
pow<-c(0.2, 0.15)
for(j in pow){
for(i in rvals){
test<-pwr.r.test(r=i, sig.level = 0.05, power=j)
#solving for n so it is not provided.
##r is an estimated correlation coefficient (analagous to effect size. )
ns<-c(ns, test$n)
}
}
library(ggplot2)
ns<-as.data.frame(ns, c(rvals, rvals))
ns
ns
c(rvals, rvals)
ns
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
pow<-c(0.2, 0.15)
for(j in pow){
for(i in rvals){
test<-pwr.r.test(r=i, sig.level = 0.05, power=j)
#solving for n so it is not provided.
##r is an estimated correlation coefficient (analagous to effect size. )
ns<-c(ns, test$n)
}
}
library(ggplot2)
ns<-as.data.frame(ns)
ns
ns<-as.data.frame(ns);ns$rvals<-c(rvals,rvals)
ns
ggplot(data=ns, aes(y=ns[1:5], x=rvals))+geom_point()+theme_classic()
ggplot(data=ns, aes(y=ns[1:5], x=rvals[1:5]))+geom_point()+theme_classic()
ggplot(data=ns[1:5], aes(y=ns, x=rvals))+geom_point()+theme_classic()
ns
ns
ns[1:5]
ggplot(data=ns[1:5,], aes(y=ns, x=rvals))+geom_point()+theme_classic()
ggplot(data=ns[1:5,], aes(y=ns, x=rvals))+geom_point()+theme_classic()+geom_point(data=ns[6:10], aes(y=ns, x=rvals, col=red))
ns[6:10]
ns
ggplot(data=ns[1:5,], aes(y=ns, x=rvals))+geom_point()+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, col="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals))+geom_point(col="black")+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, col="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,col="black"))+geom_point()+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, col="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,col=black))+geom_point()+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, col="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,color=black))+geom_point()+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, col="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,color="black"))+geom_point()+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, col="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,color="black"))+geom_point(col="black")+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, col="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,color="black"))+geom_point(color="black")+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, col="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,color="black"))+geom_point(color="black")+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, color="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,color="black"))+geom_point()+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, color="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,shape = 15))+geom_point()+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, color="red"))
ns$pow<-c(rep("0.2", 5), rep("0.15", 5))
ggplot(data=ns, aes(y=ns, x=rvals,shape = pow))+geom_point()+theme_classic()
ns$power<-c(rep("0.2", 5), rep("0.15", 5))
ggplot(data=ns, aes(y=ns, x=rvals,shape = power))+geom_point()+theme_classic()
ggplot(data=ns, aes(y=ns, x=rvals,shape = power, size =3))+geom_point()+theme_classic()
ggplot(data=ns, aes(y=ns, x=rvals,shape = power, size =2))+geom_point()+theme_classic()
ggplot(data=ns, aes(y=ns, x=rvals,shape = power))+geom_point(size = 2)+theme_classic()
ggplot(data=ns, aes(y=ns, x=rvals,shape = power))+geom_point(size = 3)+theme_classic()
#Maybe I want to solve for n to test from groups that represent grad stuedents years 1-5 of grad school
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
pow<-c(0.2, 0.15)
for(j in pow)
for(i in rvals){
test<-pwr.anova.test(k = 5, f =i , sig.level = 0.05, power =j )
#solving for n so it is not provided.
##r is an estimated correlation coefficient (analagous to effect size. )
ns<-c(ns, test$n)
}
ns<-as.data.frame(ns);ns$rvals<-c(rvals,rvals)
ns$power<-c(rep("0.2", 5), rep("0.15", 5))
ggplot(data=ns, aes(y=ns, x=rvals,shape = power))+geom_point(size = 3)+theme_classic()
a<- 39/1000 #original concentration, which is the oven dry weight of soil added to 1000 mL fluid in the cylinder. For example, 39 grams/L
b<- 12#corrected 40 second reading (from reading-blankblank)
c<- -2 #blank correction
pctsand<-function(a, b){(a-(b+c))/a}
pctsand<-function(original, reading, correction){(original-(reading+correction))/original}
pctsand(a,b,c)
c<- -2/1000 #blank correction
a<- 39/1000 #original concentration, which is the oven dry weight of soil added to 1000 mL fluid in the cylinder. For example, 39 grams/L
b<- 12/1000#corrected 40 second reading (from reading-blankblank)
c<- -2/1000 #blank correction
pctsand<-function(original, reading, correction){(original-(reading+correction))/original}
pctsand(a,b,c)
pctsand(a,b,c)*100 #convert to percent
a<- 39/1000 #original concentration, which is the oven dry weight of soil added to 1000 mL fluid in the cylinder. For example, 39 grams/L
b<- 35/1000#corrected 40 second reading (from reading-blankblank)
c<- -1/1000 #blank correction
pctclay<-function(original, reading, correction){((reading+correction))/original}
pctsand(a,b,c)*100 #convert to percent
pctclay(a,b,c)*100 #convert to percent
a<- 39/1000 #original concentration, which is the oven dry weight of soil added to 1000 mL fluid in the cylinder. For example, 39 grams/L
b<- 5/1000#corrected 40 second reading (from reading-blankblank)
c<- -1/1000 #blank correction
pctclay<-function(original, reading, correction){((reading+correction))/original}
pctclay(a,b,c)*100 #convert to percent
a<- 39/1000 #original concentration, which is the oven dry weight of soil added to 1000 mL fluid in the cylinder. For example, 39 grams/L
d<- 5/1000#corrected 40 second reading (from reading-blankblank)
e<- -1/1000 #blank correction
pctclay<-function(original, reading, correction){((reading+correction))/original}
pctclay(a,d,e)*100 #convert to percent
pctsilt<-function(sand,clay){100-(pctclay+pctsand)}
pctsilt
pctsilt(pctclay+pctsand)
pctsilt(pctsand(a,b,c)*100,pctclay(a,d,e)*100)
pctsand(a,b,c)*100
pctclay(a,d,e)*100
pctsilt(pctsand(a,b,c)*100, pctclay(a,d,e)*100)
clay<-pctclay(a,d,e)*100 #convert to percent
sand<-pctsand(a,b,c)*100 #convert to percent
pctsilt(sand, clay)
sand
clay
pctsilt<-function(sand,clay){100-(clay+sand)}
pctsilt(sand, clay)
clay
sand
pctsilt<-function(sand,clay){100-(clay+sand)}
pctsilt(sand, clay)
pctsilt(sand, clay)
clay+sand
sand
clay
a<- 39/1000 #original concentration, which is the oven dry weight of soil added to 1000 mL fluid in the cylinder. For example, 39 grams/L
b<- 12/1000#corrected 40 second reading (from reading-blankblank)
c<- -2/1000 #blank correction
pctsand<-function(original, reading, correction){(original-(reading+correction))/original}
sand<-pctsand(a,b,c)*100 #convert to percent
pctclay
a<- 39/1000 #original concentration, which is the oven dry weight of soil added to 1000 mL fluid in the cylinder. For example, 39 grams/L
d<- 5/1000#corrected 40 second reading (from reading-blankblank)
e<- -1/1000 #blank correction
pctclay<-function(original, reading, correction){((reading+correction))/original}
clay<-pctclay(a,d,e)*100 #convert to percent
pctsilt<-function(sand,clay){100-(clay+sand)}
pctsilt(sand, clay)
clay
sand
pctsilt(sand, clay)
silt<-pctsilt(sand, clay)
settlingtime<-NULL
settlingtime$Temp<-c(16,18,20,22,24,26)
settlingtime$Sand<-c(12.3,11.7,11.1,10.6,10.2,9.7)
settlingtime$Clay<-c(128.1,121.9,116.1,110.8,105.8,101.2)
as.data.frame(settlingtime)
settlingtime<-NULL
settlingtime$Temp<-c(16,18,20,22,24,26)
settlingtime$Sandmins<-c(12.3,11.7,11.1,10.6,10.2,9.7)
settlingtime$Claymins<-c(128.1,121.9,116.1,110.8,105.8,101.2)
as.data.frame(settlingtime)
a<-1.1561
b<-1.0889
c<-0.0133
d<-5.6549
sand<-function(dryweight,tinweight,blank, originalsoiladded){100-(((((dryweight-tinweight)-blank)*40/2.5)/originalsoiladded)*100)}
a<-1.1561
b<-1.0889
c<-0.0133
d<-5.6549
sand(a,b,c,d)
clay<-function(dryweight, tinweight, blank, originalsoiladded){((((dryweight-tinweight)-blank)*40/2.5)/originalsoiladded)*100}
e<-0.9394
f<-0.9206
c<-0.0133
d<-5.6549
clay(e,f,c,d)
#remember M1V1=M2V2?
M1<-274
V1<-1000
M2<-10
V2<-function(M1, V1, M2){(M1*V1)/M2}
V2(M1,V1,M2)
#remember M1V1=M2V2? Just proportional dilutions.
##Here's how much of that 274 ppm stock is required to make 100 mL of a 10 ppm standard
M1<-274
V2<-100
M2<-10
V1<-function(M1, V2, M2){(M2*V2)/M1}
V1(M1,V2,M2)
#remember M1V1=M2V2? Just proportional dilutions.
##Here's how much of that 274 ppm stock is required to make 100 mL of a 10 ppm standard, can repeat for other standrards.
M1<-274
V2<-100
M2<-5
V1<-function(M1, V2, M2){(M2*V2)/M1}
V1(M1,V2,M2)
560*1.5
315*1.5
setwd("/Users/tobymaxwell/Google Drive/documents/Grad/Research/Manuscripts/Lipids/R/Lipids/Lipids/")
setwd("/Users/Maxwell/Google Drive/documents/Grad/Research/Manuscripts/Lipids/R/Lipids/Lipids/")
setwd("/Users/Maxwell/Google Drive File Stream/documents/Grad/Research/Manuscripts/Lipids/R/Lipids/Lipids/")
setwd("/Users/Maxwell/Google Drive File Stream/My Drive/documents/Grad/Research/Manuscripts/Lipids/R/Lipids/Lipids/")
inc<-read.csv("data.2.csv")
inc$ID<-paste0(inc$Compound, inc$Time, inc$trt)
inc$ff<-inc$atmpct18O/inc$Stdatmpct
str(inc)
inc<-na.omit(inc)
str(inc)
library(ggplot2)
plot(d18O~Time, inc[inc$trt=="Water"&inc$Compound == "Lip",])
lines(inc[inc$trt=="Water"&inc$Compound == "Lip",]$Time,predict(m.inc))
tail(inc)
str(inc)
inc$Time[inc$Time==0]<-0.01
anova(lm(Dif~Compound:trt, inc))
library(minpack.lm)
inc$Compound<-factor(inc$Compound, levels = c("Lip", "Hex", "Eic"))
model<-formula(d18O~a*log(Time)+b)
m.inc<-nlsLM(model,
data = inc[inc$Compound == "Lip"&inc$trt == "Water",],
start=list(a=1.3,b=16),
control = list(maxiter = 10000000, minFactor=.00001),
trace = TRUE)
m.inc2<-nlsLM(model,
data = inc[inc$Compound == "Lip"&inc$trt == "Limonite",],
start=list(a=1.3,b=16),
control = list(maxiter = 10000000, minFactor=.00001),
trace = TRUE)
inc$lipwaterline<-1.3246*log(inc$Time)+16.781
inc.loess<-loess(d18O~Time, inc[inc$trt=="water"&inc$Compound == "Lip",], family = "sym")
plot(predict(m.inc)~inc[inc$trt=="water"&inc$Compound == "Lip",]$Time)
plot(d18O~Time, inc[inc$trt=="water"&inc$Compound == "Lip",])
library(inflection)
findiplist(x=inc[inc$trt=="soil"&inc$Compound == "Lip",]$Time, y=inc[inc$trt=="soil"&inc$Compound == "Lip",]$d18O,1)
findiplist(x=inc[inc$trt=="water"&inc$Compound == "Lip",]$Time, y=inc[inc$trt=="water"&inc$Compound == "Lip",]$d18O,1)
findiplist(x=inc[inc$trt=="water"&inc$Compound == "Lip",]$Time, y=predict(m.inc),1)
findiplist(x=inc[inc$trt=="water"&inc$Compound == "Lip",]$Time, y=predict(m.inc2),1)
xbyy<-NULL
xbyy<-sortedXyData("Time", "d18O", data=inc[inc$trt=="water"&inc$Compound == "Lip",])
xbyy2<-sortedXyData("Time", "d18O", data=inc[inc$trt=="soil"&inc$Compound == "Lip",])
NLSstRtAsymptote(xbyy)
NLSstRtAsymptote(xbyy2)
ggplot(inc, aes(y=d18O, x = Time/24, group = trt, color = trt, shape = trt))+geom_point(size = 3)+facet_wrap(~Compound, scale = "free", nrow = 3)+theme(legend.position = "bottom", legend.direction = "horizontal")+theme(axis.title.x=element_text(size = 24))+theme(axis.title.y=element_text(size = 24))+theme(axis.text.x=element_text(size = 16, angle = 80, vjust = .50))+theme(axis.text.y=element_text(size = 16))+theme(legend.text = element_text(size = 16), legend.title = element_text(size=24),strip.text=element_text(size = 16))+labs(y= expression('δ'^18*'O (‰)'),x="Time (Days)")+geom_smooth(formula=y~log(x))+theme_classic()+theme(legend.title = element_text())+scale_color_brewer(palette = "Set1")+geom_hline(data=inc, aes(yintercept=Standard))
#+theme(legend.position = "none")
inc[inc$Compound=="Hex",]$t.5<-(-1*inc[inc$Compound=="Hex",]$t.5)
inc[inc$Compound=="Eic",]$t.5<-(-1*inc[inc$Compound=="Eic",]$t.5)
ggplot(inc[inc$Time == 3833,], aes(t.5, x = ID, color = trt, group = ID))+theme_classic()+geom_boxplot(position = position_dodge(1))+facet_wrap(~Compound, scale = "free", nrow=1)+theme(legend.position = "bottom", legend.direction = "horizontal", axis.title.x=element_text(size = 24),axis.title.y=element_text(size = 24), axis.text.x=element_text(size = 16, angle = 80, vjust = .50), axis.text.y=element_text(size = 16),legend.text = element_text(size = 16), legend.title = element_text(size=24), strip.text=element_text(size = 16))+labs(y= expression('Exchange Half Time (Years)'),x="")+theme(legend.position = "bottom")+theme(axis.text.x = element_blank())+scale_color_brewer(palette = "Set1")
round(inc$t.5,3)
library(plyr)
library(Rmisc)
inc2<-NULL
inc2$ID<-inc$ID
inc2$d18O<-inc$d18O
inc2<-as.data.frame(inc2)
inc2<-(group.CI(d18O~ID,inc2))
inc3<-merge(inc, inc2, by= c("ID"))
library(plyr)
inc.avg<-ddply(inc3, .(ID,trt,Compound), summarise,
Time = mean(Time),
se18O = sd(d18O)/length(d18O),
d18O = mean(d18O.mean),
d18O.upper = mean(d18O.upper),
d18O.lower = mean(d18O.lower),
pctO = mean(pctO),
k = mean(k),
t.5 = mean(t.5),
ff=mean(ff))
str(inc.avg)
ggplot(inc.avg[inc.avg$Compound=="Lip",], aes(y=d18O, x = Time/24, color = trt))+geom_point()+facet_wrap(~Compound, scale = "free", nrow=3)+geom_errorbar(aes(ymax=d18O.upper, ymin=d18O.lower), width =5)+theme(axis.title.x=element_text(size = 24))+theme(axis.title.y=element_text(size = 24))+theme(axis.text.x=element_text(size = 16, angle = 80, vjust = .50))+theme(axis.text.y=element_text(size = 16))+theme(legend.text = element_text(size = 16), legend.title = element_text(size=24),strip.text=element_text(size = 16))+labs(y= expression('δ'^18*'O (‰)'),x="Time (Days)")+geom_smooth(data=inc[inc$Compound=="Lip",],formula=y~log(x))+theme_classic()+theme(legend.title = element_text())+scale_color_brewer(palette = "Set1")+geom_hline(data=inc[inc$Compound=="Lip",], aes(yintercept=Standard))+theme(legend.position = "bottom", legend.direction = "horizontal")
ggplot(inc.avg[inc.avg$Time == "182.3",], aes(y=k, x = ID))+geom_boxplot()
inc.avg[inc.avg$Time =="182.3"|inc.avg$Time == "0.01",]
data.frame(cols, pvals, t)
t.test(d18O~Time, data = inc[inc$trt=="Limonite"&inc$Compound=="Lip"&inc$Time>2000,])
str(test)
summary(lm(d18O~trt, data = inc[inc$Compound=="Lip"&inc$Time==3833,]))
library(agricolae)
s.m<-lm(d18O~trt, data = inc[inc$Compound=="Eic"&inc$Time==3833,])
anova(s.m)
tukey<-HSD.test(s.m, trt = "trt", 6, 0.0346, alpha = .05, group = TRUE)
tukey
LSD<-LSD.test(s.m, trt = "ID", MSerror = 165.61, DFerror = 18, group = TRUE, alpha = 0.05)
LSD
write.csv(inc.avg, "/Users/tobymaxwell/Desktop/inc.csv")
test.18<-merge(celdata,soillit, by="SiteID")
test.18O<-ddply(celdata, .(Species, Transect, Subsubsite), summarise,
d18Ocel = mean(d18Ocel))
test.18O$merge<-paste0(test.18O$Transect, test.18O$Subsubsite)
test.18Olit<-ddply(soillit, .(Transect, Subsubsite), summarise,
d18Olit = mean(d18Olit))
test.18Olit$merge<-paste0(test.18Olit$Transect, test.18Olit$Subsubsite)
test.merge<-merge(test.18Olit, test.18O, by = "merge")
plot(d18Ocel~d18Olit, test.merge)
library(rJava)
noah<-ddply(celdata, .(SiteID), summarise,
sdc=sd(pctCsoil))
noah
ggplot(inc.avg[inc.avg$Compound=="Lip",], aes(y=d18O, x = Time/24, color = trt))+geom_point()+facet_wrap(~Compound, scale = "free", nrow=3)+geom_errorbar(aes(ymax=d18O.upper, ymin=d18O.lower), width =5)+theme(axis.title.x=element_text(size = 24))+theme(axis.title.y=element_text(size = 24))+theme(axis.text.x=element_text(size = 16, angle = 80, vjust = .50))+theme(axis.text.y=element_text(size = 16))+theme(legend.text = element_text(size = 16), legend.title = element_text(size=24),strip.text=element_text(size = 16))+labs(y= expression('δ'^18*'O (‰)'),x="Time (Days)")+geom_smooth(data=inc[inc$Compound=="Lip",],formula=y~log(x))+theme_classic()+theme(legend.title = element_text())+scale_color_brewer(palette = "Set1")+geom_hline(data=inc[inc$Compound=="Lip",], aes(yintercept=Standard))+theme(legend.position = "bottom", legend.direction = "horizontal")
ggplot(inc[inc$Time == 3833,], aes(t.5, x = ID, color = trt, group = ID))+theme_classic()+geom_boxplot(position = position_dodge(1))+facet_wrap(~Compound, scale = "free", nrow=1)+theme(legend.position = "bottom", legend.direction = "horizontal", axis.title.x=element_text(size = 24),axis.title.y=element_text(size = 24), axis.text.x=element_text(size = 16, angle = 80, vjust = .50), axis.text.y=element_text(size = 16),legend.text = element_text(size = 16), legend.title = element_text(size=24), strip.text=element_text(size = 16))+labs(y= expression('Exchange Half Time (Years)'),x="")+theme(legend.position = "bottom")+theme(axis.text.x = element_blank())+scale_color_brewer(palette = "Set1")
ggplot(inc, aes(y=d18O, x = Time/24, group = trt, color = trt, shape = trt))+geom_point(size = 3)+facet_wrap(~Compound, scale = "free", nrow = 3)+theme(legend.position = "bottom", legend.direction = "horizontal")+theme(axis.title.x=element_text(size = 24))+theme(axis.title.y=element_text(size = 24))+theme(axis.text.x=element_text(size = 16, angle = 80, vjust = .50))+theme(axis.text.y=element_text(size = 16))+theme(legend.text = element_text(size = 16), legend.title = element_text(size=24),strip.text=element_text(size = 16))+labs(y= expression('δ'^18*'O (‰)'),x="Time (Days)")+geom_smooth(formula=y~log(x))+theme_classic()+theme(legend.title = element_text())+scale_color_brewer(palette = "Set1")+geom_hline(data=inc, aes(yintercept=Standard))
setwd("/Users/Maxwell/Documents/GitHub/Lipids/")
inc<-read.csv("data.2.csv")
library(extrafont)
loadfonts(device = "win")
library(ggplot2)
library(minpack.lm)
library(inflection)
library(plyr)
library(Rmisc)
library(agricolae)
inc$ID<-paste0(inc$Compound, inc$Time, inc$trt)
inc$ff<-inc$atmpct18O/inc$Water.Source
str(inc)
str(inc)
library(TTR)
summary(lm(d18O~Time, inc[inc$trt=="Limonite"&inc$Compound == "Lip",]))
ggplot(inc[inc$trt=="Limonite"&inc$Compound == "Lip",], aes(y=d18O,Time/24))+geom_point(size=3)+theme_classic()+ylab("d18O")+geom_line(data=inc.avg[inc.avg$trt=="Limonite"&inc.avg$Compound == "Lip",],lwd=1,linetype="solid" )+geom_smooth(data=inc[inc$Compound=="Lip",],formula=y~log(x), linetype="dashed", color = "black")+geom_smooth(method = "lm", linetype="dotdash", color = "Black")+theme(axis.title.x=element_text("Time (Days)"),axis.title.y=element_text(size = 18, family = "Book Antiqua"), axis.text.x=element_text(size = 16, angle = 80, vjust = .50), axis.text.y=element_text(size = 16, family = "Book Antiqua"),legend.text = element_text(size = 14, family="Book Antiqua"))+theme(legend.position = "bottom", axis.text.x = element_text(family="Book Antiqua"))
limonite<-ts(inc.avg[inc.avg$trt=="Limonite"&inc.avg$Compound == "Lip",]$d18O, start = 0)
Wheat.ts<-SMA(Wheat, 3)
plot.ts(Wheat.ts)
tail(inc)
str(inc)
inc$Time[inc$Time==0]<-0.01
anova(lm(Dif~Compound:trt, inc))
inc$Compound<-factor(inc$Compound, levels = c("Lip", "Hex", "Eic"))
model<-formula(d18O~a*log(Time)+b)
m.inc<-nlsLM(model,
data = inc[inc$Compound == "Lip"&inc$trt == "Water",],
start=list(a=1.3,b=16),
control = list(maxiter = 10000000, minFactor=.00001),
trace = TRUE)
m.inc2<-nlsLM(model,
data = inc[inc$Compound == "Lip"&inc$trt == "Limonite",],
start=list(a=1.3,b=16),
control = list(maxiter = 10000000, minFactor=.00001),
trace = TRUE)
inc$lipwaterline<-1.3246*log(inc$Time)+16.781
inc.loess<-loess(d18O~Time, inc[inc$trt=="Water"&inc$Compound == "Lip",], family = "sym")
plot(predict(m.inc)~inc[inc$trt=="Water"&inc$Compound == "Lip",]$Time)
plot(d18O~Time, inc[inc$trt=="Water"&inc$Compound == "Lip",])
findiplist(x=inc[inc$trt=="Limonite"&inc$Compound == "Lip",]$Time, y=inc[inc$trt=="Limonite"&inc$Compound == "Lip",]$d18O,1)
findiplist(x=inc[inc$trt=="Water"&inc$Compound == "Lip",]$Time, y=inc[inc$trt=="Water"&inc$Compound == "Lip",]$d18O,1)
findiplist(x=inc[inc$trt=="Water"&inc$Compound == "Lip",]$Time, y=predict(m.inc),1)
findiplist(x=inc[inc$trt=="Limonite"&inc$Compound == "Lip",]$Time, y=predict(m.inc2),1)
xbyy<-NULL
xbyy<-sortedXyData("Time", "d18O", data=inc[inc$trt=="Water"&inc$Compound == "Lip",])
xbyy2<-sortedXyData("Time", "d18O", data=inc[inc$trt=="Limonite"&inc$Compound == "Lip",])
NLSstRtAsymptote(xbyy)
NLSstRtAsymptote(xbyy2)
asymptote<-NULL
asymptote$Compound<-rep("Lip",2)
asymptote$trt<-c("Water", "Limonite")
asymptote$value<-c(37.01, 34.21)
asymptote<-data.frame(asymptote)
ggplot(inc, aes(y=d18O, x = Time/24, group = trt, shape =trt, linetype=trt))+geom_point(size = 2)+facet_wrap(~Compound, scale = "free", nrow = 3)+theme(legend.position = "bottom", legend.direction = "horizontal")+theme(axis.title.x=element_text(size = 24))+theme(axis.title.y=element_text(size = 24))+theme(axis.text.x=element_text(size = 16, angle = 80, vjust = .50))+theme(axis.text.y=element_text(size = 16))+theme(legend.text = element_text(size = 16), legend.title = element_text(size=24),strip.text=element_text(size = 16))+labs(y= expression('d'^18*'O'),x="Time (Days)")+geom_smooth(data=inc[inc$Compound=="Lip",],color = "black",formula=y~log(x))+theme_classic()+theme(legend.title = element_text())+scale_color_brewer(palette = "Set1")+geom_hline(data=inc, aes(yintercept=Standard))
#+theme(legend.position = "none")
inc[inc$Compound=="Hex",]$t.5<-(-1*inc[inc$Compound=="Hex",]$t.5)
inc[inc$Compound=="Eic",]$t.5<-(-1*inc[inc$Compound=="Eic",]$t.5)
ggplot(inc[inc$Compound=="Lip"&inc$Time>2300,], aes(t.5, x = factor(round(Time/24)), fill = trt,linetype=trt,group = ID))+theme_classic()+geom_boxplot(position = position_dodge(1))+theme(axis.title.x=element_text("Time (Days)"),axis.title.y=element_text(size = 18, family = "Book Antiqua"), axis.text.x=element_text(size = 16, angle = 80, vjust = .50), axis.text.y=element_text(size = 16, family = "Book Antiqua"),legend.text = element_text(size = 14, family="Book Antiqua"))+theme(legend.position = "bottom", axis.text.x = element_text(family="Book Antiqua"))+scale_fill_brewer(palette = "Greys")
ggplot(inc[inc$Compound=="Lip"&inc$Time>2300,], aes(Fexch, x = factor(round(Time/24)), fill = trt, linetype=trt, group = ID))+theme_classic()+geom_boxplot(position = position_dodge(1))+theme(axis.title.x=element_text("Time (Days)"),axis.title.y=element_text(size = 18, family = "Book Antiqua"), axis.text.x=element_text(size = 16, angle = 80, vjust = .50), axis.text.y=element_text(size = 16, family = "Book Antiqua"),legend.text = element_text(size = 14, family="Book Antiqua"))+theme(legend.position = "bottom", axis.text.x = element_text(family="Book Antiqua"))+scale_fill_brewer(palette="Greys")
round(inc$t.5,3)
inc2<-NULL
inc2$ID<-inc$ID
inc2$d18O<-inc$d18O
inc2<-as.data.frame(inc2)
inc2<-(group.CI(d18O~ID,inc2))
inc3<-merge(inc, inc2, by= c("ID"))
inc.avg<-ddply(inc3, .(ID,trt,Compound, ID), summarise,
Time = mean(Time),
se18O = sd(d18O)/length(d18O),
d18O = mean(d18O.mean),
d18O.upper = mean(d18O.upper),
d18O.lower = mean(d18O.lower),
pctO = mean(pctO),
k = mean(k),
t.5 = mean(t.5),
ff=mean(ff),
Standard=mean(Standard),
Fexch = mean(Fexch))
str(inc.avg)
ggplot(inc.avg, aes(y=d18O, x = Time/24,shape=trt))+geom_point(size=2)+facet_wrap(~Compound, scale = "free", nrow=3)+geom_errorbar(aes(ymax=d18O.upper, ymin=d18O.lower), width =5)+theme(axis.title.x=element_text(size = 24))+theme(axis.title.y=element_text(size = 24))+theme(axis.text.x=element_text(size = 16, angle = 80, vjust = .50))+theme(axis.text.y=element_text(size = 16))+theme(legend.text = element_text(size = 16), legend.title = element_text(size=24),strip.text=element_text(size = 16))+labs(y= expression('d'^18*'O'),x="Time (Days)")+geom_smooth(data=inc[inc$Compound=="Lip",],se=F,formula=y~log(x), color = "Black", aes(linetype=trt))+theme_classic()+theme(legend.title = element_text())+scale_color_brewer(palette = "Set1")+geom_hline(data=inc.avg, aes(yintercept=Standard), linetype="dotdash")+geom_hline(data=asymptote, aes(linetype=trt,yintercept=value))+theme(legend.position = "bottom", legend.direction = "horizontal")
ggplot(inc.avg[inc.avg$Time<2000&inc.avg$Compound=="Lip",], aes(y=d18O, x = Time/24, shape=trt))+geom_point(size=2.5)+geom_errorbar(aes(ymax=d18O.upper, ymin=d18O.lower),lwd=1, width =0.3)+theme(axis.title.x=element_text(size = 24))+theme(axis.title.y=element_text(size = 24))+theme(axis.text.x=element_text(size = 16, angle = 80, vjust = .50))+theme(axis.text.y=element_text(size = 16))+labs(y= expression(''),x="Time (Days)")+theme_classic()+scale_color_brewer(palette = "Set1")+theme(legend.position = "none")
+geom_line(data=inc[inc$Compound == "Lip"&inc$trt == "Water"&inc$Time<2000,], aes(x=Time/24, y=predict(m.inc)[1:20]))
ggplot(inc.avg[inc.avg$Time == "182.3",], aes(y=k, x = ID))+geom_boxplot()
inc.avg[inc.avg$Time =="182.3"|inc.avg$Time == "0.01",]
data.frame(cols, pvals, t)
t.test(t.5~trt, data = inc[inc$Compound=="Lip"&inc$Time>3000,])
str(test)
summary(lm(d18O~trt, data = inc[inc$Compound=="Lip"&inc$Time==3833,]))
s.m<-lm(d18O~trt, data = inc[inc$Compound=="Eic"&inc$Time==3833,])
anova(s.m)
tukey<-HSD.test(s.m, trt = "trt", 6, 0.0346, alpha = .05, group = TRUE)
tukey
LSD<-LSD.test(s.m, trt = "ID", MSerror = 165.61, DFerror = 18, group = TRUE, alpha = 0.05)
LSD
aet<-raster("/Users/Maxwell/Downloads/aet1981_2010_ave_HST_1463959465/aet1981_2010_ave_HST_1463959465.tif")
#raster  extraction
library(raster)
aet<-raster("/Users/Maxwell/Downloads/aet1981_2010_ave_HST_1463959465/aet1981_2010_ave_HST_1463959465.tif")
plot(aet)
library(sp)
library(rgdal)
shape<-readOGR(dsn="/Users/Maxwell/Google Drive File Stream/My Drive/documents/Grad/GIS/Shape FIles/AN PP Shape.shp")
extract(aet, shape)
crs(aet)
spTransform(shape, crs(aet))
extract(aet, shape)
shape<-spTransform(shape, crs(aet))
extract(aet, shape)
shape
shape
plot(shape)
plot(aet, add=T)
plot(shape, add=T)
aet
extract(aet, shape)
area(shape)
