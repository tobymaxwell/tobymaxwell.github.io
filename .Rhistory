pctsilt
pctsilt(pctclay+pctsand)
pctsilt(pctsand(a,b,c)*100,pctclay(a,d,e)*100)
pctsand(a,b,c)*100
pctclay(a,d,e)*100
pctsilt(pctsand(a,b,c)*100, pctclay(a,d,e)*100)
clay<-pctclay(a,d,e)*100 #convert to percent
sand<-pctsand(a,b,c)*100 #convert to percent
pctsilt(sand, clay)
sand
clay
pctsilt<-function(sand,clay){100-(clay+sand)}
pctsilt(sand, clay)
clay
sand
pctsilt<-function(sand,clay){100-(clay+sand)}
pctsilt(sand, clay)
pctsilt(sand, clay)
clay+sand
sand
clay
a<- 39/1000 #original concentration, which is the oven dry weight of soil added to 1000 mL fluid in the cylinder. For example, 39 grams/L
b<- 12/1000#corrected 40 second reading (from reading-blankblank)
c<- -2/1000 #blank correction
pctsand<-function(original, reading, correction){(original-(reading+correction))/original}
sand<-pctsand(a,b,c)*100 #convert to percent
pctclay
a<- 39/1000 #original concentration, which is the oven dry weight of soil added to 1000 mL fluid in the cylinder. For example, 39 grams/L
d<- 5/1000#corrected 40 second reading (from reading-blankblank)
e<- -1/1000 #blank correction
pctclay<-function(original, reading, correction){((reading+correction))/original}
clay<-pctclay(a,d,e)*100 #convert to percent
pctsilt<-function(sand,clay){100-(clay+sand)}
pctsilt(sand, clay)
clay
sand
pctsilt(sand, clay)
silt<-pctsilt(sand, clay)
settlingtime<-NULL
settlingtime$Temp<-c(16,18,20,22,24,26)
settlingtime$Sand<-c(12.3,11.7,11.1,10.6,10.2,9.7)
settlingtime$Clay<-c(128.1,121.9,116.1,110.8,105.8,101.2)
as.data.frame(settlingtime)
settlingtime<-NULL
settlingtime$Temp<-c(16,18,20,22,24,26)
settlingtime$Sandmins<-c(12.3,11.7,11.1,10.6,10.2,9.7)
settlingtime$Claymins<-c(128.1,121.9,116.1,110.8,105.8,101.2)
as.data.frame(settlingtime)
a<-1.1561
b<-1.0889
c<-0.0133
d<-5.6549
sand<-function(dryweight,tinweight,blank, originalsoiladded){100-(((((dryweight-tinweight)-blank)*40/2.5)/originalsoiladded)*100)}
a<-1.1561
b<-1.0889
c<-0.0133
d<-5.6549
sand(a,b,c,d)
clay<-function(dryweight, tinweight, blank, originalsoiladded){((((dryweight-tinweight)-blank)*40/2.5)/originalsoiladded)*100}
e<-0.9394
f<-0.9206
c<-0.0133
d<-5.6549
clay(e,f,c,d)
install.packages("pwr")
knitr::opts_chunk$set(echo = T,
results = "hide")
r<-raster(i)
listfiles[1:2]
listfiles
#Show files of some pattern in WD
listfiles <- list.files(pattern='MOD13') # in wd
listfiles
listfiles<-listfiles[1:5] #or whatever ones are .tif
listfiles
ModisDownload("MOD13A3",h=c(8, 9),v=c(4,4),dates=c("2016.01.01", "2016.05.31"),bands_subset="1 0 0 0 0 0 0", proj_type="UTM",proj_params="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",utm_zone=c(10,11),datum="WGS84",pixel_size=250, mosaic = T, proj=T, version='006')
ModisDownload("MOD13A3",h=c(8, 9),v=c(4,4),dates=c("2016.01.01", "2016.05.31"),bands_subset="1 0 0 0 0 0 0", proj_type="UTM",proj_params="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",utm_zone=c(10,11),datum="WGS84",pixel_size=250, mosaic = T, proj=T, version='006')
library(rts) #install and load the rts package for modistools specifically
library(raster)
library(rgeos)
library(rgdal)
library(rts) #install and load the rts package for modistools specifically
#need to set nasa authorization (username and password that are separately acquired online, see link above), but only need to do once with the function below: setNASAauth()
#setNASAauth()
#setMRTpath("/Users/Maxwell/MRT/bin/", update=T) #function to set the path of the modis reprojection tool for the functions to find
#modisProducts() #function to check out possible products (Beware, the version of Modis matters for extracting with ModisDownload later)
#make a date sequence to extract
start<-NULL
end<-NULL
start<-paste0(rep(2016:2018,1) , rep(".01.01",2))
end<-paste0(rep(2016:2018,1),rep(".05.31",2))
start
end
#combine into one statement for each desired date so it is easy to loop
dateseq<-NULL
dateseq<-paste((start), noquote("\",\""), paste(end), sep = "")
dateseq
#extract dateseq for all of oregon, mosaic, and reproject all in one step using ModisDownload
##note the "MOD13A3" is the modis product
###h and v are the modis tiles (can look up online which oncs youll need)
####bands - each modis product has a bunch of bands, so here can specify which ones you want, need to put 0 or 1 for all or else it may do somethin weird
#####proj_params Something weird, look up in the package to get a better idea of what to do here.
######utm_zone only needed if using UTM
######Datum: projection, pixel size: set what you what, mosaic: default is FALSE, need to set to true to mosaic. If you want there is a separate funciton to do it manually. Same                with proj, which reprojects the mosaicked file to a tif. Versopm: important, seems like 006 has everything I wanted, 005 didnt have much.
#download all modis files in the date range to your working directory (set above)
ModisDownload("MOD13A3",h=c(8, 9),v=c(4,4),dates=c("2016.01.01", "2016.05.31"),bands_subset="1 0 0 0 0 0 0", proj_type="UTM",proj_params="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",utm_zone=c(10,11),datum="WGS84",pixel_size=250, mosaic = T, proj=T, version='006')
#Show files of some pattern in WD
listfiles <- list.files(pattern='MOD13') # in wd
listfiles<-listfiles[1:5] #or whatever ones are .tif
plot(raster(listfiles[1])) # take a look at what they look like!
#Download, or get shape files separately if you want to crop, my interest here is Oregon.
oregon<-readOGR(dsn="/Users/Maxwell/Documents/geospatial/orcnty2015/", layer = "orcntypoly")
orutm<-spTransform(oregon, crs(raster(listfiles[1]))) #make sure coordinate systems of shapes and MODIS files match
plot(orutm)
#Show files of some pattern in WD
listfiles <- list.files(pattern='MOD13') # in wd
listfiles
listfiles<-listfiles[1:5] #or whatever ones are .tif
plot(raster(listfiles[1])) # take a look at what they look like!
#Download, or get shape files separately if you want to crop, my interest here is Oregon.
oregon<-readOGR(dsn="/Users/Maxwell/Documents/geospatial/orcnty2015/", layer = "orcntypoly")
orutm<-spTransform(oregon, crs(raster(listfiles[1]))) #make sure coordinate systems of shapes and MODIS files match
plot(orutm)
#kml to csv
library(rgdal)
library(raster)
library(maptools)
library(tools)
setwd("/Users/Maxwell/OneDrive - University Of Oregon/Oregon/Nat Geo/GPX files/")
files<-list.files(pattern=".gpx")
files
k<-NA
m<-NA
l<-NA
for(i in files){
k<-readOGR(i)
l<-data.frame(subset(k, select=c('ele', "name")))
m<-merge(l,m, all=T)
}
m
tail(m,100)
install.packages("MuMIn")
install.packages("rts")
knitr::opts_chunk$set(echo = T,
results = "hide")
setNASAauth()
library(raster)
library(rgeos)
library(rgdal)
library(rts) #install and load the rts package for modistools specifically
setNASAauth()
setNASAauth(eeooo4, Nihaotmm1)
setNASAauth("eeooo4", "Nihaotmm1")
setMRTpath("/Users/Maxwell/MRT/bin/", update=T) #function to set the path of the modis reprojection tool for the functions to find
modisProducts() #function to check out possible products (Beware, the version of Modis matters for extracting with ModisDownload later)
raster(nrows=10, ncol=10)
x<-raster(nrows=10, ncol=10)
plot(x)
x<-raster(nrows=10, ncol=10, values=rnorm(100, 50, 20))
rnorm(100, 50, 20)
x<-raster(nrows=10, ncol=10, values=data.frame(rnorm(100, 50, 20)))
x<-raster(nrows=10, ncol=10, vals=data.frame(rnorm(100, 50, 20)))
x<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
plot(x)
x1<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
plot(x1)
plot(x)
plot(x1)
x2<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
plot(x2)
x2<-raster(nrows=5, ncol=5, vals=rnorm(25, 50, 20))
plot(x)
plot(x1)
plot(x2)
rasters<-c(x,x1)
rasters
new<-NULL
brick<-NULL
new<-NULL
brick<-NULL
for(i in rasters){
new<-mask(i, x2)
brick<-c(new, brick)
}
new<-mask(i, x2)
i
x2
x<-rnorm(10, 5,2)
x1<-<-rnorm(10, 5,2)
x1<-rnorm(10, 5,2)
x1
x2<-5
numbers<-c(x,x1)
comb<-NULL
numbers<-c(x,x1)
new<-NULL
comb<-NULL
for(i in numbers){
new<-i+x
comb<-c(new,comb)
}
comb
x
x1
comb
x
x1
new
new<-i+x
new
new<-i+x
i
new<-i+x
numbers
numbers<-c("x","x1")
new<-NULL
comb<-NULL
for(i in numbers){
new<-i+x
comb<-c(new,comb)
}
i
numbers<-c(x,x1)
new<-NULL
comb<-NULL
for(i in numbers){
new<-i+x
comb<-c(new,comb)
}
new
i
numbers
x<-5
numbers<-rnorm(10, 5,2)
numbers
x<-5
numbers<-rnorm(10, 5,2)
new<-NULL
comb<-NULL
for(i in numbers){
new<-i+x
comb<-c(new,comb)
}
new
i
i
x
numbers
new
new<-NULL
comb<-NULL
for(i in numbers){
new<-i+x
comb<-c(new,comb)
}
comb
x<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
x1<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
x1
plot(x)
plot(x1)
x2<-crop(x1, extent(-180,0,-180,0))
x2
plot(x2)
extent(x2)
crop(x1, extent(x2))
plot(crop(x1, extent(x2)))
bounds<-extent(-180,0,-180,0)
x2<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
x<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
x1<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
x2<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
extent(x2)
plot(x)
plot(x1)
plot(x2)
bounds<-extent(-180,0,-180,0)
rasters
rasters<-c(x,x1)
new<-NULL
brick<-NULL
new<-crop(i, bounds)
rasters<-c(x,x1)
new<-NULL
brick<-NULL
for(i in rasters){
new<-crop(i, bounds)
brick<-c(new, brick)
}
bick
brick
plot(brick)
plot(brick[1])
plot(brick[[1]])
plot(x)
par(mfrow=c(1,2))
plot(brick[[1]])
plot(x)
brick
plot(brick[[2]])
plot(x)
plot(brick[[2]])
plot(x, add=T)
par(mfrow=c(1,1))
plot(brick[[2]])
plot(x, add=T)
plot(brick[[2]])
plot(x, add=T)
x<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
plot(x, add=T)
plot(brick[[2]])
plot(x, add=T)
plot(x)
plot(brick[[2]])
plot(x)
plot(brick[[2]], add=T)
plot(x)
plot(brick[[2]], add=T)
x<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
x1<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
x2<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
extent(x2)
plot(x)
plot(x1)
plot(x2)
bounds<-extent(-180,0,-180,0)
rasters<-c(x,x1)
new<-NULL
brick<-NULL
for(i in rasters){
new<-crop(i, bounds)
brick<-c(new, brick)
}
bick
brick
par(mfrow=c(1,1))
plot(x)
plot(brick[[2]], add=T)
plot(x)
plot(brick[[2]], add=T)
plot(brick[[2]], add=T, col=grey)
plot(brick[[2]], add=T, col="grey")
plot(brick[[2]], add=T)
plot(x)
plot(brick[[2]], add=T)
plot(brick[[2]], add=T, col="grey")
plot(x)
plot(brick[[2]], add=T)
plot(brick[[2]], add=T, col="grey")
brick
x<-5
add5<-function(x){x+5}
add5(1)
apply(numbers, 1, add5)
lapply(numbers, 1, add5)
lapply(numbers, add5)
numbers<-rnorm(10, 5,2)
numbers
vector(lapply(numbers, add5))
data.frame((lapply(numbers, add5)))
as.data.frame((lapply(numbers, add5)))
lapply(numbers, add5))
lapply(numbers, add5)
sapply(numbers, add5)
x<-5
new<-NULL
comb<-NULL
for(i in numbers){
new<-i+x
comb<-c(new,comb)
}
ccomb
comb
comb<-c(comb,new)
x<-5
new<-NULL
comb<-NULL
for(i in numbers){
new<-i+x
comb<-c(comb,new)
}
comb
sapply(numbers, add5)
x<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
x1<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
x2<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
extent(x2)
plot(x)
plot(x1)
plot(x2)
rasters<-c(x,x1, x2)
extent(x2)
bounds<-extent(-180,0,-180,0)
rasters<-c(x,x1, x2)
new<-NULL
brick<-NULL
for(i in rasters){
new<-crop(i, bounds)
brick<-c(new, brick)
}
brick
plot(x)
plot(brick[[2]], add=T)
plot(x)
plot(brick[[3]], add=T)
plot(brick[[3]], add=T, col="grey")
plot(x)
plot(brick[[3]], add=T)
plot(x)
plot(brick[[3]], add=T)
plot(brick[[3]], add=T, col="grey")
numbers<-rnorm(10, 5,2)
add5<-function(x){x+5}
add5(100)
numbers
numbers
lapply(numbers, add5)
sapply(numbers, add5)
numbers
numbers
2:5
x
x<-5
x
new<-numbers[1]+x
new
comb<-NULL
comb<-c(comb,new)
comb
new<-numbers[2]+x
new
comb<-c(comb,new)
comb
new<-NULL
comb<-NULL
for( i in numbers){
new<-i+x
comb<-c(comb,new)
}
comb
sapply(numbers, add5)
new<-NULL
comb<-NULL
for( i in numbers){
new<-i+x
comb<-c(new, comb)
}
comb
for( 1:2 in numbers){
new<-i+x
comb<-c(new, comb)
}
new<-NULL
comb<-NULL
for( 1:2 in numbers){
new<-i+x
comb<-c(new, comb)
}
comb
new<-NULL
comb<-NULL
for( 1:2 in numbers){
new<-i+x
comb<-c(new, comb)
}
for( i in numbers[1:2]){
new<-i+x
comb<-c(new, comb)
}
comb
new<-NULL
comb<-NULL
for( i in numbers[1:2]){
new<-i+x
comb<-c(new, comb)
}
comb
x<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
x1<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
x2<-raster(nrows=10, ncol=10, vals=rnorm(100, 50, 20))
plot(x)
plot(x1)
plot(x2)
extent(x2)
bounds<-extent(-180,0,-180,0)
rasters<-c(x,x1, x2)
rasters
new<-NULL
brick<-NULL
rasters<-c(x,x1, x2)
new<-NULL
brick<-NULL
for(i in rasters){
new<-crop(i, bounds)
brick<-c(new, brick)
}
brick
x
brick
plot(x)
plot(brick[[3]], add=T)
plot(brick[[3]], add=T, col="grey")
new2.0<-new*5
rasters<-c(x,x1, x2)
new<-NULL
brick<-NULL
for(i in rasters){
new<-crop(i, bounds)
new2.0<-new*5
brick<-c(new, brick)
}
brick
