options(comment="#")
library(pwr)
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
pwr.r.test(r=0.3, sig.level = 0.95, power=0.8)
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
pwr.r.test(r=0.3, sig.level = 0.05, power=0.2)
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
pwr.r.test(r=0.5, sig.level = 0.05, power=0.2)
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
pwr.r.test(r=0.1, sig.level = 0.05, power=0.2)
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
ns<-NULL
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
for(i in rvals){
test<-pwr.r.test(r=i, sig.level = 0.05, power=0.2)
ns<-c(test, ns)
}
ns
test
str(test)
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
for(i in rvals){
test<-pwr.r.test(r=i, sig.level = 0.05, power=0.2)
ns<-c(test$n, ns)
}
ns
plot(ns~rvals)
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
for(i in rvals){
test<-pwr.r.test(r=i, sig.level = 0.05, power=0.2)
#solving for n so it is not provided.
##r is an estimated correlation coefficient (analagous to effect size. )
ns<-c(ns, test$n)
}
plot(ns~rvals) #check out how much variance matters for sampling!
pwr.anova.test(k = 5, f =0.25 , sig.level = 0.05, power =0.8 )
#Maybe I want to solve for n to test from groups that represent grad stuedents years 1-5 of grad school
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
for(i in rvals){
test<-pwr.anova.test(k = 5, f =0.25 , sig.level = 0.05, power =0.8 )
#solving for n so it is not provided.
##r is an estimated correlation coefficient (analagous to effect size. )
ns<-c(ns, test$n)
}
plot(ns~rvals) #check out how much variance matters for sampling!
#Maybe I want to solve for n to test from groups that represent grad stuedents years 1-5 of grad school
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
for(i in rvals){
test<-pwr.anova.test(k = 5, f =i , sig.level = 0.05, power =0.8 )
#solving for n so it is not provided.
##r is an estimated correlation coefficient (analagous to effect size. )
ns<-c(ns, test$n)
}
plot(ns~rvals) #check out how much variance matters for sampling!
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
for(i in rvals){
test<-pwr.r.test(r=i, sig.level = 0.05, power=0.1)
#solving for n so it is not provided.
##r is an estimated correlation coefficient (analagous to effect size. )
ns<-c(ns, test$n)
}
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
for(i in rvals){
test<-pwr.r.test(r=i, sig.level = 0.05, power=0.25)
#solving for n so it is not provided.
##r is an estimated correlation coefficient (analagous to effect size. )
ns<-c(ns, test$n)
}
plot(ns~rvals) #check out how much variance matters for sampling!
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
for(i in rvals){
test<-pwr.r.test(r=i, sig.level = 0.05, power=0.15)
#solving for n so it is not provided.
##r is an estimated correlation coefficient (analagous to effect size. )
ns<-c(ns, test$n)
}
plot(ns~rvals) #check out how much variance matters for sampling!
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
pow<-c(0.2, 0.15)
for(j in pow){
for(i in rvals){
test<-pwr.r.test(r=i, sig.level = 0.05, power=j)
#solving for n so it is not provided.
##r is an estimated correlation coefficient (analagous to effect size. )
ns<-c(ns, test$n)
}
}
ns
plot(ns[1:5~rvals) #check out how much variance matters for sampling!
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10]~rvals, add=T, col=red)
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10]~rvals, add=T, col=red)
plot(ns[6:10]~rvals, add=T, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10]~rvals, add=T, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10]~rvals, add=TRUE, col="red")
points(ns[6:10]~rvals, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
points(ns[6:10]~rvals, col="red")
points(ns[6:10],rvals, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10],rvals, new=F, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10],rvals, new=F, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10],rvals, new=F, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10]~rvals, new=F, col="red")
plot(ns[6:10]~rvals, new=T, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10]~rvals, new=T, col="red")
plot(ns~rvals) #check out how much variance matters for sampling!
plot(ns,rvals) #check out how much variance matters for sampling!
plot(ns~c(rvals,rvals) #check out how much variance matters for sampling!
plot(ns~c(rvals,rvals)) #check out how much variance matters for sampling!
c(rvals,rvals)
ns
plot(ns~c(rvals,rvals)) #check out how much variance matters for sampling!
plot(ns[1:5~rvals)
plot(ns[1:5]~rvals)
plot(ns[6:10]~rvals, add=T)
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
par(new=T)
plot(ns[6:10]~rvals)
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
par(new=T)
plot(ns[6:10]~rvals)
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
par(new=T)
plot(ns[6:10]~rvals, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
par(new=F)
plot(ns[6:10]~rvals, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
par(new=T)
plot(ns[6:10]~rvals, col="red")
plot(ns[1:5]~rvals) #check out how much variance matters for sampling!
plot(ns[6:10]~rvals, col="red")
ns
library(ggplot2)
ggplot(aes(ns[1:5], x=rvals))+geom_point()+theme_classic()
ggplot(data=ns, aes(ns[1:5], x=rvals))+geom_point()+theme_classic()
ns<-data.frame(c(ns, c(rvals, rvals)))
ns
ns<-as.data.frame(c(ns, c(rvals, rvals)))
ns
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
pow<-c(0.2, 0.15)
for(j in pow){
for(i in rvals){
test<-pwr.r.test(r=i, sig.level = 0.05, power=j)
#solving for n so it is not provided.
##r is an estimated correlation coefficient (analagous to effect size. )
ns<-c(ns, test$n)
}
}
library(ggplot2)
ns<-as.data.frame(c(ns, c(rvals, rvals)))
ns
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
pow<-c(0.2, 0.15)
for(j in pow){
for(i in rvals){
test<-pwr.r.test(r=i, sig.level = 0.05, power=j)
#solving for n so it is not provided.
##r is an estimated correlation coefficient (analagous to effect size. )
ns<-c(ns, test$n)
}
}
library(ggplot2)
ns<-as.data.frame(ns, c(rvals, rvals))
ns
ns
c(rvals, rvals)
ns
#need to select appropriate function for your design. I'm just going to measure everyone in my hallway, so there's no grouping, and I'll use a correlation test
##pwr.r.test(n = , r = , sig.level = , power = )
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
pow<-c(0.2, 0.15)
for(j in pow){
for(i in rvals){
test<-pwr.r.test(r=i, sig.level = 0.05, power=j)
#solving for n so it is not provided.
##r is an estimated correlation coefficient (analagous to effect size. )
ns<-c(ns, test$n)
}
}
library(ggplot2)
ns<-as.data.frame(ns)
ns
ns<-as.data.frame(ns);ns$rvals<-c(rvals,rvals)
ns
ggplot(data=ns, aes(y=ns[1:5], x=rvals))+geom_point()+theme_classic()
ggplot(data=ns, aes(y=ns[1:5], x=rvals[1:5]))+geom_point()+theme_classic()
ggplot(data=ns[1:5], aes(y=ns, x=rvals))+geom_point()+theme_classic()
ns
ns
ns[1:5]
ggplot(data=ns[1:5,], aes(y=ns, x=rvals))+geom_point()+theme_classic()
ggplot(data=ns[1:5,], aes(y=ns, x=rvals))+geom_point()+theme_classic()+geom_point(data=ns[6:10], aes(y=ns, x=rvals, col=red))
ns[6:10]
ns
ggplot(data=ns[1:5,], aes(y=ns, x=rvals))+geom_point()+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, col="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals))+geom_point(col="black")+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, col="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,col="black"))+geom_point()+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, col="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,col=black))+geom_point()+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, col="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,color=black))+geom_point()+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, col="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,color="black"))+geom_point()+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, col="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,color="black"))+geom_point(col="black")+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, col="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,color="black"))+geom_point(color="black")+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, col="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,color="black"))+geom_point(color="black")+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, color="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,color="black"))+geom_point()+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, color="red"))
ggplot(data=ns[1:5,], aes(y=ns, x=rvals,shape = 15))+geom_point()+theme_classic()+geom_point(data=ns[6:10,], aes(y=ns, x=rvals, color="red"))
ns$pow<-c(rep("0.2", 5), rep("0.15", 5))
ggplot(data=ns, aes(y=ns, x=rvals,shape = pow))+geom_point()+theme_classic()
ns$power<-c(rep("0.2", 5), rep("0.15", 5))
ggplot(data=ns, aes(y=ns, x=rvals,shape = power))+geom_point()+theme_classic()
ggplot(data=ns, aes(y=ns, x=rvals,shape = power, size =3))+geom_point()+theme_classic()
ggplot(data=ns, aes(y=ns, x=rvals,shape = power, size =2))+geom_point()+theme_classic()
ggplot(data=ns, aes(y=ns, x=rvals,shape = power))+geom_point(size = 2)+theme_classic()
ggplot(data=ns, aes(y=ns, x=rvals,shape = power))+geom_point(size = 3)+theme_classic()
#Maybe I want to solve for n to test from groups that represent grad stuedents years 1-5 of grad school
ns<-NULL
test<-NULL
rvals<-c(0.1, 0.2, 0.3, 0.4, 0.5)
pow<-c(0.2, 0.15)
for(j in pow)
for(i in rvals){
test<-pwr.anova.test(k = 5, f =i , sig.level = 0.05, power =j )
#solving for n so it is not provided.
##r is an estimated correlation coefficient (analagous to effect size. )
ns<-c(ns, test$n)
}
ns<-as.data.frame(ns);ns$rvals<-c(rvals,rvals)
ns$power<-c(rep("0.2", 5), rep("0.15", 5))
ggplot(data=ns, aes(y=ns, x=rvals,shape = power))+geom_point(size = 3)+theme_classic()
a<- 39/1000 #original concentration, which is the oven dry weight of soil added to 1000 mL fluid in the cylinder. For example, 39 grams/L
b<- 12#corrected 40 second reading (from reading-blankblank)
c<- -2 #blank correction
pctsand<-function(a, b){(a-(b+c))/a}
pctsand<-function(original, reading, correction){(original-(reading+correction))/original}
pctsand(a,b,c)
c<- -2/1000 #blank correction
a<- 39/1000 #original concentration, which is the oven dry weight of soil added to 1000 mL fluid in the cylinder. For example, 39 grams/L
b<- 12/1000#corrected 40 second reading (from reading-blankblank)
c<- -2/1000 #blank correction
pctsand<-function(original, reading, correction){(original-(reading+correction))/original}
pctsand(a,b,c)
pctsand(a,b,c)*100 #convert to percent
a<- 39/1000 #original concentration, which is the oven dry weight of soil added to 1000 mL fluid in the cylinder. For example, 39 grams/L
b<- 35/1000#corrected 40 second reading (from reading-blankblank)
c<- -1/1000 #blank correction
pctclay<-function(original, reading, correction){((reading+correction))/original}
pctsand(a,b,c)*100 #convert to percent
pctclay(a,b,c)*100 #convert to percent
a<- 39/1000 #original concentration, which is the oven dry weight of soil added to 1000 mL fluid in the cylinder. For example, 39 grams/L
b<- 5/1000#corrected 40 second reading (from reading-blankblank)
c<- -1/1000 #blank correction
pctclay<-function(original, reading, correction){((reading+correction))/original}
pctclay(a,b,c)*100 #convert to percent
a<- 39/1000 #original concentration, which is the oven dry weight of soil added to 1000 mL fluid in the cylinder. For example, 39 grams/L
d<- 5/1000#corrected 40 second reading (from reading-blankblank)
e<- -1/1000 #blank correction
pctclay<-function(original, reading, correction){((reading+correction))/original}
pctclay(a,d,e)*100 #convert to percent
pctsilt<-function(sand,clay){100-(pctclay+pctsand)}
pctsilt
pctsilt(pctclay+pctsand)
pctsilt(pctsand(a,b,c)*100,pctclay(a,d,e)*100)
pctsand(a,b,c)*100
pctclay(a,d,e)*100
pctsilt(pctsand(a,b,c)*100, pctclay(a,d,e)*100)
clay<-pctclay(a,d,e)*100 #convert to percent
sand<-pctsand(a,b,c)*100 #convert to percent
pctsilt(sand, clay)
sand
clay
pctsilt<-function(sand,clay){100-(clay+sand)}
pctsilt(sand, clay)
clay
sand
pctsilt<-function(sand,clay){100-(clay+sand)}
pctsilt(sand, clay)
pctsilt(sand, clay)
clay+sand
sand
clay
a<- 39/1000 #original concentration, which is the oven dry weight of soil added to 1000 mL fluid in the cylinder. For example, 39 grams/L
b<- 12/1000#corrected 40 second reading (from reading-blankblank)
c<- -2/1000 #blank correction
pctsand<-function(original, reading, correction){(original-(reading+correction))/original}
sand<-pctsand(a,b,c)*100 #convert to percent
pctclay
a<- 39/1000 #original concentration, which is the oven dry weight of soil added to 1000 mL fluid in the cylinder. For example, 39 grams/L
d<- 5/1000#corrected 40 second reading (from reading-blankblank)
e<- -1/1000 #blank correction
pctclay<-function(original, reading, correction){((reading+correction))/original}
clay<-pctclay(a,d,e)*100 #convert to percent
pctsilt<-function(sand,clay){100-(clay+sand)}
pctsilt(sand, clay)
clay
sand
pctsilt(sand, clay)
silt<-pctsilt(sand, clay)
settlingtime<-NULL
settlingtime$Temp<-c(16,18,20,22,24,26)
settlingtime$Sand<-c(12.3,11.7,11.1,10.6,10.2,9.7)
settlingtime$Clay<-c(128.1,121.9,116.1,110.8,105.8,101.2)
as.data.frame(settlingtime)
settlingtime<-NULL
settlingtime$Temp<-c(16,18,20,22,24,26)
settlingtime$Sandmins<-c(12.3,11.7,11.1,10.6,10.2,9.7)
settlingtime$Claymins<-c(128.1,121.9,116.1,110.8,105.8,101.2)
as.data.frame(settlingtime)
a<-1.1561
b<-1.0889
c<-0.0133
d<-5.6549
sand<-function(dryweight,tinweight,blank, originalsoiladded){100-(((((dryweight-tinweight)-blank)*40/2.5)/originalsoiladded)*100)}
a<-1.1561
b<-1.0889
c<-0.0133
d<-5.6549
sand(a,b,c,d)
clay<-function(dryweight, tinweight, blank, originalsoiladded){((((dryweight-tinweight)-blank)*40/2.5)/originalsoiladded)*100}
e<-0.9394
f<-0.9206
c<-0.0133
d<-5.6549
clay(e,f,c,d)
install.packages("pwr")
knitr::opts_chunk$set(echo = T,
results = "hide")
r<-raster(i)
listfiles[1:2]
listfiles
#Show files of some pattern in WD
listfiles <- list.files(pattern='MOD13') # in wd
listfiles
listfiles<-listfiles[1:5] #or whatever ones are .tif
listfiles
ModisDownload("MOD13A3",h=c(8, 9),v=c(4,4),dates=c("2016.01.01", "2016.05.31"),bands_subset="1 0 0 0 0 0 0", proj_type="UTM",proj_params="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",utm_zone=c(10,11),datum="WGS84",pixel_size=250, mosaic = T, proj=T, version='006')
ModisDownload("MOD13A3",h=c(8, 9),v=c(4,4),dates=c("2016.01.01", "2016.05.31"),bands_subset="1 0 0 0 0 0 0", proj_type="UTM",proj_params="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",utm_zone=c(10,11),datum="WGS84",pixel_size=250, mosaic = T, proj=T, version='006')
library(rts) #install and load the rts package for modistools specifically
library(raster)
library(rgeos)
library(rgdal)
library(rts) #install and load the rts package for modistools specifically
#need to set nasa authorization (username and password that are separately acquired online, see link above), but only need to do once with the function below: setNASAauth()
#setNASAauth()
#setMRTpath("/Users/Maxwell/MRT/bin/", update=T) #function to set the path of the modis reprojection tool for the functions to find
#modisProducts() #function to check out possible products (Beware, the version of Modis matters for extracting with ModisDownload later)
#make a date sequence to extract
start<-NULL
end<-NULL
start<-paste0(rep(2016:2018,1) , rep(".01.01",2))
end<-paste0(rep(2016:2018,1),rep(".05.31",2))
start
end
#combine into one statement for each desired date so it is easy to loop
dateseq<-NULL
dateseq<-paste((start), noquote("\",\""), paste(end), sep = "")
dateseq
#extract dateseq for all of oregon, mosaic, and reproject all in one step using ModisDownload
##note the "MOD13A3" is the modis product
###h and v are the modis tiles (can look up online which oncs youll need)
####bands - each modis product has a bunch of bands, so here can specify which ones you want, need to put 0 or 1 for all or else it may do somethin weird
#####proj_params Something weird, look up in the package to get a better idea of what to do here.
######utm_zone only needed if using UTM
######Datum: projection, pixel size: set what you what, mosaic: default is FALSE, need to set to true to mosaic. If you want there is a separate funciton to do it manually. Same                with proj, which reprojects the mosaicked file to a tif. Versopm: important, seems like 006 has everything I wanted, 005 didnt have much.
#download all modis files in the date range to your working directory (set above)
ModisDownload("MOD13A3",h=c(8, 9),v=c(4,4),dates=c("2016.01.01", "2016.05.31"),bands_subset="1 0 0 0 0 0 0", proj_type="UTM",proj_params="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",utm_zone=c(10,11),datum="WGS84",pixel_size=250, mosaic = T, proj=T, version='006')
#Show files of some pattern in WD
listfiles <- list.files(pattern='MOD13') # in wd
listfiles<-listfiles[1:5] #or whatever ones are .tif
plot(raster(listfiles[1])) # take a look at what they look like!
#Download, or get shape files separately if you want to crop, my interest here is Oregon.
oregon<-readOGR(dsn="/Users/Maxwell/Documents/geospatial/orcnty2015/", layer = "orcntypoly")
orutm<-spTransform(oregon, crs(raster(listfiles[1]))) #make sure coordinate systems of shapes and MODIS files match
plot(orutm)
#Show files of some pattern in WD
listfiles <- list.files(pattern='MOD13') # in wd
listfiles
listfiles<-listfiles[1:5] #or whatever ones are .tif
plot(raster(listfiles[1])) # take a look at what they look like!
#Download, or get shape files separately if you want to crop, my interest here is Oregon.
oregon<-readOGR(dsn="/Users/Maxwell/Documents/geospatial/orcnty2015/", layer = "orcntypoly")
orutm<-spTransform(oregon, crs(raster(listfiles[1]))) #make sure coordinate systems of shapes and MODIS files match
plot(orutm)
#kml to csv
library(rgdal)
library(raster)
library(maptools)
library(tools)
setwd("/Users/Maxwell/OneDrive - University Of Oregon/Oregon/Nat Geo/GPX files/")
files<-list.files(pattern=".gpx")
files
k<-NA
m<-NA
l<-NA
for(i in files){
k<-readOGR(i)
l<-data.frame(subset(k, select=c('ele', "name")))
m<-merge(l,m, all=T)
}
m
tail(m,100)
install.packages("MuMIn")
install.packages("rts")
knitr::opts_chunk$set(echo = T,
results = "hide")
setNASAauth()
library(raster)
library(rgeos)
library(rgdal)
library(rts) #install and load the rts package for modistools specifically
setNASAauth()
setNASAauth(eeooo4, Nihaotmm1)
setNASAauth("eeooo4", "Nihaotmm1")
setMRTpath("/Users/Maxwell/MRT/bin/", update=T) #function to set the path of the modis reprojection tool for the functions to find
modisProducts() #function to check out possible products (Beware, the version of Modis matters for extracting with ModisDownload later)
